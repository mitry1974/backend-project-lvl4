-
  const getInputName = (propertyName) => `formData[${propertyName}]`
  const getErrorText = (errors, property) => {
    return errors[property];
  }

mixin formFor()
  form&attributes(attributes)
    block

mixin tasksNavItems
  li.nav-item
    a.nav-link(href=route('getAllTaskStatuses'))= t('layouts.application.statuses')
  li.nav-item
    a.nav-link(href=route('getAllTags'))= t('layouts.application.tags')


mixin inputHeader(mixinName, entity, propertyName, labelText, options)
  -
    const inputOptions = { errors: [], type: 'text', divClass: '', inputClass: '', ...options};
    const { errors = [], type, divClass } = inputOptions;
    let inputClass = `form-control ${inputOptions.inputClass}`;
    const errorText = getErrorText(errors, propertyName);
    if(errorText) {
      inputClass += ' ' + 'is-invalid'
    }
    const feedbackClass = errorText ? 'invalid-feedback' : 'valid_feedback'
    const feedbackValue = errorText || ''
  div(class=divClass)
    if(labelText != '')
      label(for=propertyName)= `${labelText}:`
    +#{mixinName}(entity, propertyName, inputClass, inputOptions)&attributes(attributes)
    div(class=feedbackClass)= feedbackValue

mixin addInput(mixinName, entity, propertyName, labelText, options)
  +inputHeader(mixinName, entity, propertyName, labelText, options)&attributes(attributes)

mixin inputTextarea(entity, propertyName, inputClass, options)
  textarea(
    class=inputClass
    name=getInputName(propertyName)
    id=propertyName
    rows=options.rows)&attributes(attributes)= _.get(entity, propertyName, '')

mixin input(entity, propertyName, inputClass, options)
    input(
      class= inputClass
      name=getInputName(propertyName)
      value=_.get(entity, propertyName, '')
      id=propertyName
      type=options.type
    )&attributes(attributes)

mixin select(entity, propertyName, inputClass, options)
  - const currentValue = _.get(entity, propertyName, '')
  select(
      class= inputClass
      name=getInputName(propertyName)
      id=propertyName
      type=options.type)&attributes(attributes)
    each v in options.values
      - const value = v[options.compareBy];
      - const isSelected = _.isArray(currentValue) ? _.indexOf(currentValue, value) !== -1 : value === currentValue;
      if(isSelected)
        option(value=value selected)= v.getFullName()
      else
        option(value=value)= v.getFullName()

mixin submit(options={})
  div(class=options.divClass)
    input.btn.btn-primary(type='submit')&attributes(attributes)


mixin submitFor(method)
  .form-group
    input(name="_method" type="hidden" value=method)
    input.btn.btn-primary(type='submit')&attributes(attributes)
