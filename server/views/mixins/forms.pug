- const getInputName = (propertyName) => `formData[${propertyName}]`
- const getErrorText = (errors, property) => {
-   const error = errors.find((error) => error.property === property)
-   if (!error) {
-     return;
-   }
-   return Object.values(error.constraints).join(', ');
- }

mixin formFor(caption)
  div.container-fluid
    div.row.justify-content-center.pb-5.mt-5
      div.col-12.col-sm-8.col-md-7.col-lg-4
        div.card.shadow-sm.border-top.border-primary
          div.card-body
            h1.h3.mb-4.mt-3.text-center= caption
            form&attributes(attributes)
              block

mixin input(entity, propertyName, errors = [])
  - const errorText = getErrorText(errors, propertyName);
  - let formClass = 'form-control'
  - if (errorText) {
  -   formClass += ' ' + 'is-invalid'
  - } else if(value) {
  -     formClass += ' ' + 'is-valid'
  - }
  - const feedbackClass = errorText ? 'invalid-feedback' : 'valid_feedback'
  - const feedbackValue = errorText || ''
  div.form-group(class=propertyName)
    input(
      class= formClass
      name=getInputName(propertyName)
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    div(class=feedbackClass)= feedbackValue

mixin submit
  .form-group
    input.btn.btn-primary(type='submit')&attributes(attributes)


mixin submitFor(method)
  .form-group
    input(name="_method" type="hidden" value=method)
    input.btn.btn-primary(type='submit')&attributes(attributes)
